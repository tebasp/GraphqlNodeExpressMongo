type Query {
  getCourses: [Course]
  getCourse(id: ID!): Course
  getPeople: [Person]
  getPerson(id: ID!): Person
  globalSearch(keyword: String!): [GlobalSearch]
}

type Mutation {
  "Crea un curso"
  createCourse(input: CourseInput!): Course
  editCourse(id: ID!, input: CourseEditInput!): Course
  deleteCourse(id: ID!): Boolean
  createPerson(input: PersonInput!): Person
  editPerson(id: ID!, input: PersonEditInput!): Person
  addPeople(courseId: ID!, personId: ID!): Course
}

type Course {
  _id: ID!
  title: String!
  topic: String
  teacher: String!
  description: String
  people: [Person]
  level: Level
}

interface Person {
  _id: ID!
  name: String!
  email: String!
}

type Student implements Person {
  _id: ID!
  name: String!
  email: String!
  avatar: String
}

type Monitor implements Person {
  _id: ID!
  name: String!
  email: String!
  phone: String
}

union GlobalSearch = Student | Monitor | Course

input CourseInput {
  title: String!
  topic: String
  teacher: String!
  description: String
  level: Level
}

input CourseEditInput {
  title: String
  topic: String
  teacher: String
  description: String
}

input PersonInput {
  name: String!
  email: String!
  phone: String
  avatar: String
}

input PersonEditInput {
  name: String!
  email: String!
  phone: String
  avatar: String
}

enum Level {
  beginner
  intermediate
  advanced
}
